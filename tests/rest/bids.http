### 1. Get all bids information Successfully with correct token and an admin role
GET http://localhost:5000/bids
Content-Type: application/json
Accept: application/json
Authorization: Bearer {token}

> {%
 client.test("Get all bids information successfully because the provided token was correct and the user was admin",function() {
        client.assert(response.status === 200, "Response status is not 200");
    }
);
%}
### 2. place a bid successfully
POST http://localhost:5000/bids
Content-Type: application/json
Accept: application/json
Authorization: Bearer {token}

{
  "userid": 2,
  "user": "bako",
  "bookId": 2,
  "amount": 500
}

> {%
 client.test("place a bid ",function() {
        client.assert(response.status === 200, "Response status is not 200");
    }
);
%}
### 3. place a bid while you bid is lower than the highest bid for this auction and expects an error message
POST http://localhost:5000/bids
Content-Type: application/json
Accept: application/json
Authorization: Bearer {token}

{
  "userid": 2,
  "user": "bako",
  "bookId": 1,
  "amount": 65
}

> {%
 client.test("place a bid while you bid is lower than the highest bid for this auction and expects an error message ",function() {
        client.assert(response.status === 403, "Response status is not 403");
    }
);
%}
### 4. place a bid while you bid is lower than the start price for this auction and expects an error message
POST http://localhost:5000/bids
Content-Type: application/json
Accept: application/json
Authorization: Bearer {token]

{
  "userid": 2,
  "user": "bako",
  "bookId": 2,
  "amount": 45
}

> {%
 client.test("place a bid while you bid is lower than the start price for this auction and expects an error message",function() {
        client.assert(response.status === 403, "Response status is not 403");
    }
);
%}
### 5. place a bid and gets an error message because amount is missing
POST http://localhost:5000/bids
Content-Type: application/json
Accept: application/json
Authorization: Bearer {token}

{
  "userid": 3,
  "user": "razh",
  "bookId": 2
}

> {%
 client.test("place a bid and gets an error message because amount is missing",function() {
        client.assert(response.status === 400, "Response status is not 400");
    }
);
%}
### 6. place a bid and gets an error message because bookId is missing
POST http://localhost:5000/bids
Content-Type: application/json
Accept: application/json
Authorization: Bearer {token}

{
  "userid": 3,
  "user": "razh",

  "amount": 100
}

> {%
 client.test("place a bid and gets an error message because bookId is missing",function() {
        client.assert(response.status === 400, "Response status is not 400");
    }
);
%}
### 7. place a bid and gets an error message because user information is missing
POST http://localhost:5000/bids
Content-Type: application/json
Accept: application/json
Authorization: Bearer {token]

{

  "bookId": 1,
  "amount": 100
}

> {%
 client.test("place a bid and gets an error message because user information is missing",function() {
        client.assert(response.status === 400, "Response status is not 400");
    }
);
%}
### 8. place a bid and gets an error message because userId does not exist and gets an error message
POST http://localhost:5000/bids
Content-Type: application/json
Accept: application/json
Authorization: Bearer {token}

{
  "userid": 10,
  "user": "bako",
  "bookId": 2,
  "amount": 550
}

> {%
 client.test("place a bid and gets an error message because userId does not exist and gets an error message",function() {
        client.assert(response.status === 400, "Response status is not 400");
    }
);
%}
### 9. place a bid and gets an error message because bookId does not exist and gets an error message
POST http://localhost:5000/bids
Content-Type: application/json
Accept: application/json
Authorization: Bearer {token}

{
  "userid": 2,
  "user": "bako",
  "bookId": 10,
  "amount": 500
}

> {%
 client.test("place a bid and gets an error message because bookId does not exist and gets an error message",function() {
        client.assert(response.status === 400, "Response status is not 400");
    }
);
%}
### 10. deleting a bid successfully with the token of an admin
DELETE http://localhost:5000/bids/1
Content-Type: application/json
Accept: application/json
Authorization: Bearer {token}

> {%
 client.test("deleting a bid successfully and expects an OK response with a message",function() {
        client.assert(response.status === 200, "Response status is not 200");
    }
);
%}
### 11. deleting a bid but the ID of the bid does not exists and expects an error message
DELETE http://localhost:5000/bids/1
Content-Type: application/json
Accept: application/json
Authorization: Bearer {token}

> {%
 client.test("deleting a bid but the ID of the bid does not exists and expects (NOT FOUND) with an error message ",function() {
        client.assert(response.status === 404, "Response status is not 404");
    }
);
%}